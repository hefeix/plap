# Factorial - 3 flavors
(fact $n = if $n==0 1 $n*(fact $n-1))
# or
(fact1 $n = apply times [1..$n])
# or
(fact2 $n = accumulate times [1..$n] 1)

# Fibonacci
(fib $n = if $n<=1 1 (fib $n-2)+(fib $n-1))

# Combinators
(S $x = \$y -> \$z -> ($x $z) ($y $z))
(K $x = \$y -> $x)
(I $x = $x)
# Note that you can't do much with these, because every expression must have a
#  definite type (maybe)

# The following is loosely based on http://merd.sourceforge.net/cookbook.html,
# which is in turn based on examples from the Perl Cookbook

##
# Accessing Sublists
##

(nth $l $n = if $n==0 (hd $l) (nth (tl $l) $n-1))
  
(sub $l $i = 
 let [helper $list $indices $offset = 
      split $list \$y $ys -> split $indices \$x $xs -> 
        if $x==$offset $y:(helper $ys $xs $offset+1) 
                       (helper $ys $indices $offset+1)]
 (helper $l $i 0))
(subs $list $from $len = sub $list [$from..$from+$len-1])

(last $l = if (tl $l)==[] (hd $l) (last (tl $l)))

(lasts $l $n = if (length $l)<=$n $l (lasts (tl $l) $n))

##
# Converting Between ASCII Characters and Values
##

(upchars $l = map $l \$x -> index2symbol (symbol2index $x)+1)

##
# List transformation
##

(uniq $l =
 let [helper $x $xs = 
      if $xs==[] [$x] (if $x==(hd $xs) [] [$x])~(helper (hd $xs) (tl $xs))]
 (split $l helper))

##
# Reversing a String by Word or Character
##

(reverse $l = (split $l \$x $xs -> (reverse $xs)~[$x]))

(join $joiner $words = 
 split $words \$x $xs -> $x~ (if $xs==[] [] $joiner~(join $joiner $xs)))

(words $list = 
 let [helper $words $word $l = 
      if $l==[] (if $word==[] $words $word:$words)
         (if (hd $l)==' ' (helper $word:$words [] (tl $l))
                          (helper $words $word~[hd $l] (tl $l)))]
 (reverse (helper [] [] $list)))

(long_palindromes $words =
 filter $words \$s -> $s==(reverse $s) && (length $s)>4)
