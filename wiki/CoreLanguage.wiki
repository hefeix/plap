#summary description of the Combo Lisp dialect

===== Preliminaries =====

  * Unless otherwise specified, a sequence of entities may be empty, and the entities themselves are separated by whitespace.
  * Whitespace is one or more spaces and/or tabs. Unless otherwise specified, any ammount of whitespace may occur between any two consecutive entities.
  * A name is an identifier or a scalar.
    * An identifier is a nonempty sequences of digits, letters, and underscores, not beginning with a digit, containing no whitespace, that is not a keyword. A keyword is any word appearing in `codeface` in this document.
    * A scalar is dollar sign (`$`) followed by an identifier, with no intervening whitespace.
  * Matched parentheses (`(` and `)`) may be placed around any entity. Any entity that contains whitespace and is nested inside another entity ''must'' be put in parentheses.

===== Core Syntax =====

A program is a sequence of expressions and imports, each separated by one or more newlines.

  * An expression is a name, a literal, or a function application
    * A literal is a Boolean literal, number literal, character literal, or nil.
      * A Boolean literal is `true` or `false`.
      * A number literal is a nonempty sequence of digits (`0-9`), optionally preceded by a minus sign (`-`), optionally containing exactly one period (`.`) in some position other than the last, containing no whitespace. [[BR]]''Examples:'' `-3.14`, `2003.0`, `.5`, `42`, `109`, `-00`
      * A character literal is a normal character literal or an escaped character literal.
        * A normal character literal is single quote (`'`), followed by a single character other than a single quote or a hash (`#`), followed by a single quote.
        * An escaped character literal is a single quote, followed by a backslash (`\`), followed by a `t` (tab), `n` (newline), `#`, `\`, `'`, or `"`. [[BR]]''Examples:'' `'a'`, `'\n'`, `'\\'`
      * Nil is an empty pair of brackets (`[]`), or the keyword `nil`.
    * A function application is an identifier, followed by a nonempty sequence of expressions. [[BR]]''Examples:'' `foo 1 2 'x' (bar $x)`, `bla ()`, `baz 3.4 [] 1 2 3 []`
  * An import is the keyword `import`, followed by an expression. [[BR]]''Examples:'' `import ants`, `import blocksworld`

===== Syntactic Sugar =====

Every combo program may be expressed using nothing but the core syntax. For convenience however, the following syntactic sugar is provided. Every sugared program corresponds to exactly one unsugared program.

====== Special operators ======

A number of special operators (primaily infix, but some prefix as well) are provided; each is equivalent to some function application expression. The operators are listed in ascending order of precedence. The arity of an expression may be the same for both forms or may be different, as indicated in the table. Infix operations of equal precedence are left-associative, except for `pair` (`,`) and `cons` (`:`), which are right-associative.

|| '''Infix''' || '''Arity''' || '''Example Special Expression''' || '''Equivalent Function Application Expression''' ||
|| [,] || variadic || [a b c,[],foo (foo bar)] || (list (a b c) nil (foo (foo bar))) ||
|| [..] || 2 || [foo bar..42] || (range (foo bar) 42) ||
|| [...] || 2 || [1...10] || (xrange 1 10) ||
|| (,) || variadic, 2 || (a,b,c,d e f,[]) || (pair a (pair b (pair c (pair (d e f) nil)))) ||
|| = || variadic, 3 || foo $x $y = bla bla || (def foo (list $x $y) (bla bla)) ||
|| \ || 1 || \foo bar baz || (lambda (foo bar baz)) ||
|| <- || 1 || <- x y z || (fact (x y z)) ||
|| ^ || 2 || foo^3 || (decl foo 3) ||
|| -> || 2 || foo bar -> baz bap || (arrow (foo bar) (baz bap)) ||
|| || || variadic || a || b || c || (or a b c) ||
|| && || variadic || a && b && c || (and a b c) ||
|| : || 2 || () ||
|| == != || 2 || a==b && c!=d || (and (equal a b) (not_equal c d)) ||
|| <= >= < > || 2 || a<=b || x+y>d || q>=r || (or (less_equal a b) (greater (plus x y) d) (greater_equal q r)) ||
|| + - || variadic || a+b-c || (minus (plus a b) c) ||
|| ~ || variadic || a~b~c || (concat a b c) ||
|| * || variadic || a*b+c*d || (plus (times a b) (times c d)) ||
|| / || 2 || a+b/c*d || (plus a (times (div b c) d)) ||
|| ! - || 1 || !a || -b || (or (not a) (less (negative b) c)) ||

====== String literals ======

A string in double-quotes, with same escape-sequences recognized in character literals, is sugar for the equivalent list of characters. So for example `"foobar"` is equivalent to `['f', 'o', 'o', 'b', 'a', 'r']`, and `"b'la\"bla"` is equivalent to `['b' '\'', 'l', 'a', '"', 'b', 'l', 'a']`, etc.

====== Comments ======

Comments begin with a `#` and run until a newline is reached, with the exception of escaped `#`s within string literals, which do not begin comments. Whenever a comment appears it is equivalent to the empty string.

====== Significant indentation ======

Note that since newlines are not considered whitespace, every expression that uses only the core syntax must be one a single line. To stretch an expression over multiple lines without otherwise affecting parsing, newlines may be escaped (i.e. ended with a backslash). An escaped newline is treated as a single character of whitespace.

Indentation may also be used to control parsing and expression grouping, according to the following simple rules:

  1. A line that is indented at the same level or a level less than that of the line above it creates ''n+1'' right-parens (`)`) at the begining of the line, where ''n'' is the number of levels it decreases the indentation by.
  1. A line that is indented (and immediately below a line containing an expression or part of an expression) is parsed as part of that expression, and creates a left-paren (`(`) at the begining of the line. This left-paren appears after any right-parens that might appear from applying rules one and two.
  1. Lines that end in a comma are have their newlines escaped in the same manner as lines ending in a backslash, overriding the above rules. Note that unlike a backslash, a comma ending a line is not ignored, but is considered as part of the input.
  1. If the final line in an expression is indented ''n'' levels, ''n'' right-parens are created at the end of the line.

Note that by rule one, indentation levels must match - if we first indent by two spaces, and then by two more, we can indent the following line by two or four spaces, or more than four spaces, but not by one or three spaces. Every increase in indentation corresponds to a single new indentation level, regardless of the number of whitespace characters it increases indentation by.

''Examples:''[[BR]][[BR]]

|| '''Indented''' || '''Equvalent Unindented''' ||
|| {{{ a
  b
   c
  e
   f
 }}} || {{{ a (b (c)) (e (f))
 }}} ||
|| {{{ foo (bar,
      baz,
      bap) buz [blub,
                shlub] tub
   a b
   c d
     e
   f
 }}} || {{{ foo (bar,baz,bap) buz [blub,shlub] tub (a b) (c d (e))
 }}} ||
|| {{{ a b\
 c d
 }}} || {{{ a b c d
 }}} ||