(import "combo/examples.co")

# Factorial - 3 flavors
(assert 
 (fact 0)==1
 (fact 1)==1
 (fact 2)==2
 (fact 3)==6
 (fact 4)==24
 (fact 5)==120
)
(foreach [1..10] \$x -> 
 assert (fact $x)==(fact1 $x) && (fact $x)==(fact2 $x))

# Fibonacci
(assert 
 (fib 0)==1
 (fib 1)==1
 (fib 2)==2
 (fib 3)==3
 (fib 4)==5
 (fib 5)==8
 (fib 6)==13
 (fib 7)==21
 (fib 8)==34
)

# Combinators
(assert (((S \$x -> \$y -> $x*$y) (\$x -> plus 1 $x)) 42)==42*43)
(assert ((K 'a') 'b')=='a')
(assert (I [])==[])
(assert (I 'a')=='a')

##
# Accessing Substrings
##

(assert (nth [1..10] 0)==1)
(assert (nth [0..10] 5)==5)

(s     = "This is what you have")
(first = (nth s 0))
(start = (sub s [5...7]))
(rest  = (sub s [13...(length s)]))
(lastl = (last s))
(end   = (lasts s 4))
(piece = (subs s 8 4))

(assert 
 first=='T'
 start=="is"
 rest=="you have"
 lastl=='e'
 end=="have"
 piece=="what"
)

##
# Converting Between ASCII Characters and Values
##
(assert (upchars "HAL")=="IBM")

# Tricky nested closures
(nasty_nest $l $i = filter $l (\$x -> $x<$i))
(assert 
 (nasty_nest [1,2] 1)==[]
 (nasty_nest [1,2] 2)==[1]
 (nasty_nest [1,2] 3)==[1,2]
)
(supernasty_nest $l = \$x -> nasty_nest $l $x)
(assert 
 ((supernasty_nest [1,2]) 1)==[]
 ((supernasty_nest [1,2]) 2)==[1]
 ((supernasty_nest [1,2]) 3)==[1,2]
)

##
# Processing a String One Character at a Time
##
(assert 
 (uniq "aabbccdda")=="abcda"
 (filter [1..10] \$x -> $x>5)==[6..10]
 (uniq (sort "an apple a day"))==" adelnpy"
)

(assert 
 (sort [2,1])==[1,2]
 (sort [5,4,3,1])==[1,3,4,5]
 (sort [])==[]
 (sort [1,2,3])==[1,2,3]
)

##
# Reversing a String by Word or Character
##

(assert (reverse "abcdef")=="fedcba" # reverse letters
        (reverse [])==[])

(assert (words "foo bar baz ")==["foo","bar","baz"]
        (words "")==[])

# reverse words
(assert (reverse (words "foo bar baz"))==["baz","bar","foo"]
        (join " " (reverse (words "foo bar baz")))=="baz bar foo")

(assert (long_palindromes ["foof","racecar","hatah"])==["racecar","hatah"])
(assert (long_palindromes [])==[])

##
# Operating on a Series of Integers
##

#assert (map [0..2] \$e -> print (to_str $e)~" ")=="
#println ""
#print "Infancy is: "
#print (fold [0..2] "" \$x $y-> (to_str $x)~" "~$y)
#println ""
